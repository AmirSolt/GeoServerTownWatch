// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type CreateEventsParams struct {
	OccurAt      pgtype.Timestamptz
	ExternalID   string
	Neighborhood pgtype.Text
	LocationType pgtype.Text
	CrimeType    CrimeType
	Region       string
	Lat          float64
	Long         float64
}

const scanAreas = `-- name: ScanAreas :many
SELECT scan_areas($1, $2, $3)
`

type ScanAreasParams struct {
	FromDate        pgtype.Timestamptz
	ToDate          pgtype.Timestamptz
	ScanEventsLimit int32
}

func (q *Queries) ScanAreas(ctx context.Context, arg ScanAreasParams) ([]interface{}, error) {
	rows, err := q.db.Query(ctx, scanAreas, arg.FromDate, arg.ToDate, arg.ScanEventsLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var scan_areas interface{}
		if err := rows.Scan(&scan_areas); err != nil {
			return nil, err
		}
		items = append(items, scan_areas)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const scanCustomArea = `-- name: ScanCustomArea :many
SELECT scan_custom_area($1, $2, $3, $4, $5, $6, $7)
`

type ScanCustomAreaParams struct {
	Lat        float64
	Long       float64
	Radius     float64
	Region     string
	FromDate   pgtype.Timestamptz
	ToDate     pgtype.Timestamptz
	CountLimit int32
}

func (q *Queries) ScanCustomArea(ctx context.Context, arg ScanCustomAreaParams) ([]interface{}, error) {
	rows, err := q.db.Query(ctx, scanCustomArea,
		arg.Lat,
		arg.Long,
		arg.Radius,
		arg.Region,
		arg.FromDate,
		arg.ToDate,
		arg.CountLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var scan_custom_area interface{}
		if err := rows.Scan(&scan_custom_area); err != nil {
			return nil, err
		}
		items = append(items, scan_custom_area)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
