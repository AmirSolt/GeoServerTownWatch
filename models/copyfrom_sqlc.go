// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: copyfrom_sqlc.go

package models

import (
	"context"
)

// iteratorForCreateTempEvents implements pgx.CopyFromSource.
type iteratorForCreateTempEvents struct {
	rows                 []CreateTempEventsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateTempEvents) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateTempEvents) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].OccurAt,
		r.rows[0].ExternalID,
		r.rows[0].Details,
		r.rows[0].Lat,
		r.rows[0].Long,
	}, nil
}

func (r iteratorForCreateTempEvents) Err() error {
	return nil
}

func (q *Queries) CreateTempEvents(ctx context.Context, arg []CreateTempEventsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"_temp_events"}, []string{"occur_at", "external_id", "details", "lat", "long"}, &iteratorForCreateTempEvents{rows: arg})
}
